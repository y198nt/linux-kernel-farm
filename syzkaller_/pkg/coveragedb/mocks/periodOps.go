// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	civil "cloud.google.com/go/civil"
	coveragedb "github.com/google/syzkaller/pkg/coveragedb"
	mock "github.com/stretchr/testify/mock"
)

// periodOps is an autogenerated mock type for the periodOps type
type periodOps struct {
	mock.Mock
}

// IsValidPeriod provides a mock function with given fields: p
func (_m *periodOps) IsValidPeriod(p coveragedb.TimePeriod) bool {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for IsValidPeriod")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(coveragedb.TimePeriod) bool); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// lastPeriodDate provides a mock function with given fields: d
func (_m *periodOps) lastPeriodDate(d civil.Date) civil.Date {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for lastPeriodDate")
	}

	var r0 civil.Date
	if rf, ok := ret.Get(0).(func(civil.Date) civil.Date); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Get(0).(civil.Date)
	}

	return r0
}

// pointedPeriodDays provides a mock function with given fields: d
func (_m *periodOps) pointedPeriodDays(d civil.Date) int {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for pointedPeriodDays")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(civil.Date) int); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// newPeriodOps creates a new instance of periodOps. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newPeriodOps(t interface {
	mock.TestingT
	Cleanup(func())
}) *periodOps {
	mock := &periodOps{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
