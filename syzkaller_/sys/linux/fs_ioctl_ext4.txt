# Copyright 2018 syzkaller project authors. All rights reserved.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

include <uapi/linux/fs.h>
include <uapi/linux/fsmap.h>
include <fs/ext4/ext4.h>

ioctl$EXT4_IOC_GROUP_EXTEND(fd fd, cmd const[EXT4_IOC_GROUP_EXTEND], arg ptr[in, intptr])
ioctl$EXT4_IOC_GROUP_ADD(fd fd, cmd const[EXT4_IOC_GROUP_ADD], arg ptr[in, ext4_new_group_input])
ioctl$EXT4_IOC_MIGRATE(fd fd, cmd const[EXT4_IOC_MIGRATE])
ioctl$EXT4_IOC_ALLOC_DA_BLKS(fd fd, cmd const[EXT4_IOC_ALLOC_DA_BLKS])
ioctl$EXT4_IOC_MOVE_EXT(fd fd, cmd const[EXT4_IOC_MOVE_EXT], arg ptr[in, move_extent])
ioctl$EXT4_IOC_SWAP_BOOT(fd fd, cmd const[EXT4_IOC_SWAP_BOOT])
ioctl$EXT4_IOC_PRECACHE_EXTENTS(fd fd, cmd const[EXT4_IOC_PRECACHE_EXTENTS])
ioctl$EXT4_IOC_CLEAR_ES_CACHE(fd fd, cmd const[EXT4_IOC_CLEAR_ES_CACHE])
ioctl$EXT4_IOC_GETSTATE(fd fd, cmd const[EXT4_IOC_GETSTATE], arg ptr[out, flags[ext4_state_flags, int32]])
ioctl$EXT4_IOC_GET_ES_CACHE(fd fd, cmd const[EXT4_IOC_GET_ES_CACHE], args ptr[inout, fiemap])
ioctl$EXT4_IOC_CHECKPOINT(fd fd, cmd const[EXT4_IOC_CHECKPOINT], arg ptr[in, flags[ext4_checkpoint_flags, int32]])
ioctl$EXT4_IOC_GETFSUUID(fd fd, cmd const[EXT4_IOC_GETFSUUID], arg ptr[out, fsuuid])
ioctl$EXT4_IOC_SETFSUUID(fd fd, cmd const[EXT4_IOC_SETFSUUID], arg ptr[in, fsuuid])
ioctl$EXT4_IOC_GETFSMAP(fd fd, cmd const[FS_IOC_GETFSMAP], arg ptr[in, fsmap_head_ext4])

fsmap_head_ext4 {
	fmh_iflags	int32
	fmh_oflags	int32
	fmh_count	int32
	fmh_entries	int32
	fmh_reserved	array[int64, 6]
	fmh_key		array[fsmap, 2]
	fmh_recs	ptr[out, fsmap]
}

ioctl$EXT4_IOC_GETVERSION(fd fd, cmd const[EXT4_IOC_GETVERSION], arg ptr[out, intptr])
ioctl$EXT4_IOC_GETVERSION_OLD(fd fd, cmd const[EXT4_IOC_GETVERSION_OLD], arg ptr[in, int32])
ioctl$EXT4_IOC_SETVERSION(fd fd, cmd const[EXT4_IOC_SETVERSION], arg ptr[out, intptr])
ioctl$EXT4_IOC_SETVERSION_OLD(fd fd, cmd const[EXT4_IOC_SETVERSION_OLD], arg ptr[in, int32])
ioctl$EXT4_IOC_RESIZE_FS(fd fd, cmd const[EXT4_IOC_RESIZE_FS], arg ptr[in, intptr])
ioctl$EXT4_FITRIM(fd fd, cmd const[FITRIM], arg ptr[in, fstrim_range])

ioctl$EXT4_FS_IOC_SET_ENCRYPTION_POLICY(fd fd, cmd const[FS_IOC_SET_ENCRYPTION_POLICY], arg ptr[in, fscrypt_policy])
ioctl$EXT4_FS_IOC_GET_ENCRYPTION_PWSALT(fd fd, cmd const[FS_IOC_GET_ENCRYPTION_PWSALT], arg ptr[out, array[int8, 16]])
ioctl$EXT4_FS_IOC_GET_ENCRYPTION_POLICY(fd fd, cmd const[FS_IOC_GET_ENCRYPTION_POLICY], arg ptr[out, fscrypt_policy])
ioctl$EXT4_FS_IOC_GET_ENCRYPTION_POLICY_EX(fd fd, cmd const[FS_IOC_GET_ENCRYPTION_POLICY_EX], arg ptr[inout, fscrypt_get_policy_ex_arg])
ioctl$EXT4_FS_IOC_ADD_ENCRYPTION_KEY(fd fd, cmd const[FS_IOC_ADD_ENCRYPTION_KEY], arg ptr[in, fscrypt_add_key_arg])
ioctl$EXT4_FS_IOC_REMOVE_ENCRYPTION_KEY(fd fd, cmd const[FS_IOC_REMOVE_ENCRYPTION_KEY], arg ptr[in, fscrypt_remove_key_arg])
ioctl$EXT4_FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS(fd fd, cmd const[FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS], arg ptr[in, fscrypt_remove_key_arg])
ioctl$EXT4_FS_IOC_GET_ENCRYPTION_KEY_STATUS(fd fd, cmd const[FS_IOC_GET_ENCRYPTION_KEY_STATUS], arg ptr[in, fscrypt_get_key_status_arg])
ioctl$EXT4_FS_IOC_GET_ENCRYPTION_NONCE(fd fd, cmd const[FS_IOC_GET_ENCRYPTION_NONCE], arg ptr[out, fscrypt_context])

fscrypt_context {
	version	int8
	v1	fscrypt_context_v1
	v2	fscrypt_context_v2
}

fscrypt_context_v1 {
	version				int8
	contents_encryption_mode	int8
	filenames_encryption_mode	int8
	flag				int8
	master_key_encryption		array[int8, 8]
	nonce				array[int8, 16]
}

fscrypt_context_v2 {
	version				int8
	contents_encryption_mode	int8
	filenames_encryption_mode	int8
	flags				int8
	log2_data_unit_size		int8
	reserved			array[int8, 3]
	master_key_identifier		array[int8, 16]
	nonce				array[int8, 16]
}

ioctl$EXT4_IOC_SHUTDOWN(fd fd, cmd const[EXT4_IOC_SHUTDOWN], arg ptr[in, int32])
ioctl$EXT4_FS_IOC_ENABLE_VERITY(fd fd, cmd const[FS_IOC_ENABLE_VERITY], arg ptr[in, fsverity_enable_arg])
ioctl$EXT4_FS_IOC_MEASURE_VERITY(fd fd, cmd const[FS_IOC_MEASURE_VERITY], arg ptr[in, fsverity_digest])
ioctl$EXT4_FS_IOC_READ_VERITY_METADATA(fd fd, cmd const[FS_IOC_READ_VERITY_METADATA], arg ptr[in, fsverity_read_metadata_arg])
ioctl$EXT4_FS_IOC_GETFSLABEL(fd fd, cmd const[FS_IOC_GETFSLABEL], arg ptr[out, array[int8, 17]])
ioctl$EXT4_FS_IOC_SETFSLABEL(fd fd, cmd const[FS_IOC_SETFSLABEL], arg ptr[in, array[int8, 17]])

ext4_state_flags = EXT4_STATE_FLAG_EXT_PRECACHED, EXT4_STATE_FLAG_NEW, EXT4_STATE_FLAG_NEWENTRY, EXT4_STATE_FLAG_DA_ALLOC_CLOSE
ext4_checkpoint_flags = EXT4_IOC_CHECKPOINT_FLAG_DISCARD, EXT4_IOC_CHECKPOINT_FLAG_ZEROOUT, EXT4_IOC_CHECKPOINT_FLAG_DRY_RUN

# EXT4_IOC_SHUTDOWN on root fs effectively brings the machine down in weird ways.
# Fortunately, the value does not conflict with any other ioctl commands for now.
# ioctl$EXT4_IOC_SHUTDOWN(fd fd, cmd const[EXT4_IOC_SHUTDOWN]) (disabled)

# EXT4_IOC_RESIZE_FS on root fs can shrink it to 0 (or whatever is the minimum size)
# and then creation of new temp dirs for tests will fail.
# TODO: not necessary for sandbox=namespace as it tests in a tmpfs
# and/or if we mount tmpfs for sandbox=none (#971).
# ioctl$EXT4_IOC_RESIZE_FS(fd fd, cmd const[EXT4_IOC_RESIZE_FS]) (disabled)

ext4_new_group_input {
	group		int32
	block_bitmap	int64
	inode_bitmap	int64
	inode_table	int64
	blocks_count	int32
	reserved_blocks	int16
	unused		const[0, int16]
}

move_extent {
	reserved	const[0, int32]
	donor_fd	fd
	orig_start	int64
	donor_start	int64
	len		int64
	moved_len	int64
}

fsuuid {
	fsu_len		flags[ext4_uuid_len, int32]
	fsu_flags	const[0, int32]
	fsu_uuid	array[int8, UUID_SIZE]
}

ext4_uuid_len = 0, UUID_SIZE
